package nl.han.dea.markkiepe.spotitube.resources;

import nl.han.dea.markkiepe.spotitube.resources.dto.authentication.AuthenticationDTO;
import nl.han.dea.markkiepe.spotitube.services.authentication.AuthenticationService;
import nl.han.dea.markkiepe.spotitube.resources.exceptionMappers.IncorrectCredentialsExceptionMapper;

import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * Authentication Resource<br>
 * Resource that is listening to the path {@code "/login"}.<br>
 * This resource is responsible for receiving all requests that involve anything with authentication.
 *
 * @see AuthenticationService
 *
 * @since 1.0
 * @author Mark Kiepe
 */
@Path("/login")
public class AuthenticationResource {
    private AuthenticationService authenticationService;

    /**
     * Setter for the {@link AuthenticationService} that is used by this resource to get the requested information.
     * @param authenticationService {@link AuthenticationService}
     * @since 1.0
     */
    @Inject
    public void setAuthenticationService(AuthenticationService authenticationService) {
        this.authenticationService = authenticationService;
    }

    /**
     * This method is listening to the {@code POST} request on the url {@code "/login"}<br>
     * The method requires a {@code JSON} input with the correct keys (see {@link AuthenticationDTO} for the
     * required keys). If the login request is successful {@code HTTP OK} is returned.
     * If the client entered the wrong credentials another HTTP code is returned to the client with the message
     * explaining what went wrong. For more information about what happens when the request goes wrong please
     * view {@link IncorrectCredentialsExceptionMapper}.
     *
     * @see AuthenticationService
     * @see AuthenticationDTO
     * @see IncorrectCredentialsExceptionMapper
     *
     * @implNote
     * Listening to the path {@code "/login"} to the {@code "POST"} requests.
     * This method requires a {@link AuthenticationDTO} as parameter.
     * <br>
     * This method is listening to {@code JSON} requests and gives back its values in {@code JSON}.
     *
     * @param userDto {@link AuthenticationDTO} generated by the client if the right keys & values are provided.
     * @return {@link Response} in {@code JSON}
     * @since 1.0
     */
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Response login(AuthenticationDTO userDto) {
        return Response
                .status(Response.Status.OK)
                .entity(authenticationService.loginRequest(userDto))
                .build();
    }
}